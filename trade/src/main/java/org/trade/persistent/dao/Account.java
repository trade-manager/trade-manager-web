/* ===========================================================
 * TradeManager : a application to trade strategies for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2011-2011, by Simon Allen and Contributors.
 *
 * Project Info:  org.trade
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Java is a trademark or registered trademark of Oracle, Inc.
 * in the United States and other countries.]
 *
 * (C) Copyright 2011-2011, by Simon Allen and Contributors.
 *
 * Original Author:  Simon Allen;
 * Contributor(s):   -;
 *
 * Changes
 * -------
 *
 */
package org.trade.persistent.dao;

// Generated Feb 21, 2011 2:18:03 PM by Hibernate Tools 3.4.0.CR1

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.Id;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import org.trade.core.dao.Aspect;
import org.trade.core.util.TradingCalendar;
import org.trade.dictionary.valuetype.AccountType;
import org.trade.dictionary.valuetype.Currency;

import java.io.Serializable;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

import static jakarta.persistence.GenerationType.IDENTITY;


/**
 * Account generated by hbm2java
 *
 * @author Simon Allen
 * @version $Revision: 1.0 $
 */
@Entity
@Table(name = "account")
public class Account extends Aspect implements Serializable, Cloneable {

    /**
     *
     */

    private static final long serialVersionUID = 5891080561163346464L;

    @NotNull
    private String accountNumber;
    @NotNull
    private String accountType;
    private String alias;
    private BigDecimal availableFunds = new BigDecimal(0);
    private BigDecimal buyingPower = new BigDecimal(0);
    private BigDecimal cashBalance = new BigDecimal(0);
    @NotNull
    private String currency;
    private BigDecimal grossPositionValue = new BigDecimal(0);
    @NotNull
    private String name;
    private BigDecimal realizedPnL = new BigDecimal(0);
    private BigDecimal unrealizedPnL = new BigDecimal(0);
    private ZonedDateTime lastUpdateDate;
    private List<PortfolioAccount> portfolioAccounts = new ArrayList<PortfolioAccount>(0);

    public Account() {
        this.accountType = AccountType.INDIVIDUAL;
        this.currency = Currency.USD;
        this.lastUpdateDate = TradingCalendar.getDateTimeNowMarketTimeZone();
    }

    /**
     * Constructor for Account.
     *
     * @param name          String
     * @param accountNumber String
     * @param currency      String
     * @param accountType   String
     * @param isDefault     Boolean
     */
    public Account(String name, String accountNumber, String currency, String accountType) {
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.name = name;
        this.currency = currency;
        this.lastUpdateDate = TradingCalendar.getDateTimeNowMarketTimeZone();
    }

    /**
     * Constructor for Account.
     *
     * @param accountNumber      String
     * @param name               String
     * @param availableFunds     BigDecimal
     * @param buyingPower        BigDecimal
     * @param cashBalance        BigDecimal
     * @param currency           String
     * @param grossPositionValue BigDecimal
     * @param realizedPnL        BigDecimal
     * @param unrealizedPnL      BigDecimal
     * @param isDefault          Boolean
     * @param tradestrategies    List<Tradestrategy>
     */
    public Account(String accountNumber, String name, String accountType, BigDecimal availableFunds,
                   BigDecimal buyingPower, BigDecimal cashBalance, String currency, BigDecimal grossPositionValue,
                   BigDecimal realizedPnL, BigDecimal unrealizedPnL) {
        this.accountNumber = accountNumber;
        this.accountType = accountType;
        this.name = name;
        this.availableFunds = availableFunds;
        this.buyingPower = buyingPower;
        this.cashBalance = cashBalance;
        this.currency = currency;
        this.grossPositionValue = grossPositionValue;
        this.realizedPnL = realizedPnL;
        this.unrealizedPnL = unrealizedPnL;
        this.lastUpdateDate = TradingCalendar.getDateTimeNowMarketTimeZone();
    }

    /**
     * Method getId.
     *
     * @return Integer
     */
    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
        return this.id;
    }

    /**
     * Method setId.
     *
     * @param idAccount Integer
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Method getName.
     *
     * @return String
     */
    @Column(name = "name", unique = true, nullable = false, length = 45)
    public String getName() {
        return this.name;
    }

    /**
     * Method setName.
     *
     * @param name String
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Method getAccountNumber.
     *
     * @return String
     */
    @Column(name = "account_number", unique = true, nullable = false, length = 20)
    public String getAccountNumber() {
        return this.accountNumber;
    }

    /**
     * Method setAccountNumber.
     *
     * @param accountNumber String
     */
    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    /**
     * Method getAccountType.
     *
     * @return String
     */
    @Column(name = "account_type", length = 20)
    public String getAccountType() {
        return this.accountType;
    }

    /**
     * Method setAccountType.
     *
     * @param accountType String
     */
    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }

    /**
     * Method getAlias.
     *
     * @return String
     */
    @Column(name = "alias", unique = true, nullable = true, length = 45)
    public String getAlias() {
        return this.alias;
    }

    /**
     * Method setAlias.
     *
     * @param alias String
     */
    public void setAlias(String alias) {
        this.alias = alias;
    }

    /**
     * Method getCurrency.
     *
     * @return String
     */
    @Column(name = "currency", nullable = false, length = 3)
    public String getCurrency() {
        return this.currency;
    }

    /**
     * Method setCurrency.
     *
     * @param currency String
     */
    public void setCurrency(String currency) {
        this.currency = currency;
    }

    /**
     * Method getAvailableFunds.
     *
     * @return BigDecimal
     */
    @Column(name = "available_funds", precision = 10)
    public BigDecimal getAvailableFunds() {
        return this.availableFunds;
    }

    /**
     * Method setAvailableFunds.
     *
     * @param availableFunds BigDecimal
     */
    public void setAvailableFunds(BigDecimal availableFunds) {
        this.availableFunds = availableFunds;
    }

    /**
     * Method getBuyingPower.
     *
     * @return BigDecimal
     */
    @Column(name = "buying_power", precision = 10)
    public BigDecimal getBuyingPower() {
        return this.buyingPower;
    }

    /**
     * Method setBuyingPower.
     *
     * @param buyingPower BigDecimal
     */
    public void setBuyingPower(BigDecimal buyingPower) {
        this.buyingPower = buyingPower;
    }

    /**
     * Method getCashBalance.
     *
     * @return BigDecimal
     */
    @Column(name = "cash_balance", precision = 10)
    public BigDecimal getCashBalance() {
        return this.cashBalance;
    }

    /**
     * Method setCashBalance.
     *
     * @param cashBalance BigDecimal
     */
    public void setCashBalance(BigDecimal cashBalance) {
        this.cashBalance = cashBalance;
    }

    /**
     * Method getGrossPositionValue.
     *
     * @return BigDecimal
     */
    @Column(name = "gross_position_value", precision = 10)
    public BigDecimal getGrossPositionValue() {
        return this.grossPositionValue;
    }

    /**
     * Method setGrossPositionValue.
     *
     * @param grossPositionValue BigDecimal
     */
    public void setGrossPositionValue(BigDecimal grossPositionValue) {
        this.grossPositionValue = grossPositionValue;
    }

    /**
     * Method getRealizedPnL.
     *
     * @return BigDecimal
     */
    @Column(name = "realized_pn_l", precision = 10)
    public BigDecimal getRealizedPnL() {
        return this.realizedPnL;
    }

    /**
     * Method setRealizedPnL.
     *
     * @param realizedPnL BigDecimal
     */
    public void setRealizedPnL(BigDecimal realizedPnL) {
        this.realizedPnL = realizedPnL;
    }

    /**
     * Method getUnrealizedPnL.
     *
     * @return BigDecimal
     */
    @Column(name = "unrealized_pn_l", precision = 10)
    public BigDecimal getUnrealizedPnL() {
        return this.unrealizedPnL;
    }

    /**
     * Method setUnrealizedPnL.
     *
     * @param unrealizedPnL BigDecimal
     */
    public void setUnrealizedPnL(BigDecimal unrealizedPnL) {
        this.unrealizedPnL = unrealizedPnL;
    }

    /**
     * Method getDefaultPortfolio.
     *
     * @return Portfolio
     */
    @Transient
    public Portfolio getDefaultPortfolio() {
        for (PortfolioAccount item : this.portfolioAccounts) {
            if (item.getPortfolio().getIsDefault()) {
                return item.getPortfolio();
            }
        }
        return null;
    }

    /**
     * Method getLastUpdateDate.
     *
     * @return ZonedDateTime
     */
    @Column(name = "last_update_date", nullable = false)
    public ZonedDateTime getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    /**
     * Method setLastUpdateDate.
     *
     * @param lastUpdateDate ZonedDateTime
     */
    public void setLastUpdateDate(ZonedDateTime lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

    /**
     * Method getVersion.
     *
     * @return Integer
     */
    @Version
    @Column(name = "version")
    public Integer getVersion() {
        return this.version;
    }

    /**
     * Method setVersion.
     *
     * @param version Integer
     */
    public void setVersion(Integer version) {
        this.version = version;
    }

    /**
     * Method getPortfolioAccounts.
     *
     * @return List<PortfolioAccounts>
     */
    @OneToMany(mappedBy = "account", fetch = FetchType.LAZY, orphanRemoval = true, cascade = {CascadeType.REFRESH})
    public List<PortfolioAccount> getPortfolioAccounts() {
        return this.portfolioAccounts;
    }

    /**
     * Method setPortfolioAccounts.
     *
     * @param codeAttributes List<CodeAttribute>
     */
    public void setPortfolioAccounts(List<PortfolioAccount> portfolioAccounts) {
        this.portfolioAccounts = portfolioAccounts;
    }

    /**
     * Method isDirty.
     *
     * @return boolean
     */
    @Transient
    public boolean isDirty() {
        for (PortfolioAccount item : this.getPortfolioAccounts()) {
            if (item.isDirty())
                return true;
        }
        return super.isDirty();
    }

    /**
     * Method clone.
     *
     * @return Object
     * @throws CloneNotSupportedException
     */
    public Object clone() throws CloneNotSupportedException {

        Account account = (Account) super.clone();
        return account;
    }

    /**
     * Method toString.
     *
     * @return String
     */
    public String toString() {
        return this.getAccountNumber() + "-" + this.getName();
    }

}

debug=false
# sql_database=tradeprod
# sql_user_name=trader
# sql_user_password=ledzepplin
spring.data.rest.base-path=/api
spring.datasource.url=@db-dba.url@/@db-dba.schema@
spring.datasource.name=@db-dba.schema@
spring.datasource.username=@db-user.username@
spring.datasource.password=@db-user.password@
# Hibernate property values are none, validate, update, create, and create-drop.
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
# Naming strategy
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImprovedNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
# Naming strategy these are require for the @column annotation to work
spring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
spring.datasource.initialization-mode=always
spring.datasource.continue-on-error=false
spring.datasource.platform=mysql
spring.datasource.schema-username=root
spring.datasource.schema-password=
# spring.datasource.schema=classpath:schema/schema-${spring.datasource.platform}.sql
spring.datasource.data-username=root
spring.datasource.data-password=
# spring.datasource.data=classpath:schema/data-${spring.datasource.platform}.sql,classpath:schema/drop-create-user-${spring.datasource.platform}.sql
spring.datasource.separator=;


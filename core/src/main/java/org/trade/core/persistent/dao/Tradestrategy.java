/* ===========================================================
 * TradeManager : a application to trade strategies for the Java(tm) platform
 * ===========================================================
 *
 * (C) Copyright 2011-2011, by Simon Allen and Contributors.
 *
 * Project Info:  org.trade
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
 * USA.
 *
 * [Java is a trademark or registered trademark of Oracle, Inc.
 * in the United States and other countries.]
 *
 * (C) Copyright 2011-2011, by Simon Allen and Contributors.
 *
 * Original Author:  Simon Allen;
 * Contributor(s):   -;
 *
 * Changes
 * -------
 *
 */
package org.trade.core.persistent.dao;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Transient;
import org.trade.core.dao.Aspect;
import org.trade.core.factory.ClassFactory;
import org.trade.core.persistent.dao.series.indicator.StrategyData;
import org.trade.core.util.CoreUtils;
import org.trade.core.valuetype.TradestrategyStatus;

import java.io.Serial;
import java.io.Serializable;
import java.math.BigDecimal;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Vector;

/**
 * Tradestrategy generated by hbm2java
 *
 * @author Simon Allen
 * @version $Revision: 1.0 $
 */
@Entity
@Table(name = "tradestrategy")
public class Tradestrategy extends Aspect implements Serializable, Cloneable {

    @Serial
    private static final long serialVersionUID = -2181676329258092177L;

    @Column(name = "risk_amount", nullable = false, precision = 10)
    private BigDecimal riskAmount;

    @Column(name = "chart_days")
    private Integer chartDays;

    @Column(name = "bar_size")
    private Integer barSize;

    @Column(name = "tier", length = 1)
    private String tier;

    @Column(name = "status", length = 20)
    private String status;

    @Column(name = "side", length = 3)
    private String side;

    @Column(name = "trade", length = 1)
    private Boolean trade = false;

    @ManyToOne(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
    @JoinColumn(name = "contract_id", nullable = false)
    private Contract contract;

    @ManyToOne(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
    @JoinColumn(name = "tradingday_id", nullable = false)
    private Tradingday tradingday;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "strategy_id", nullable = false)
    private Strategy strategy;

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "portfolio_id", nullable = false)
    private Portfolio portfolio;

    @OneToMany(mappedBy = "tradestrategy", fetch = FetchType.LAZY, cascade = {CascadeType.REFRESH})
    private List<TradeOrder> tradeOrders = new ArrayList<>(0);

    @OneToMany(mappedBy = "tradestrategy", fetch = FetchType.LAZY, cascade = {CascadeType.ALL})
    private List<CodeValue> codeValues = new ArrayList<>(0);

    @Transient
    private StrategyData strategyData = null;

    @Transient
    private final TradestrategyStatus tradestrategyStatus = new TradestrategyStatus();

    public Tradestrategy() {
    }

    /**
     * Constructor for Tradestrategy.
     *
     * @param chartDays Integer
     * @param barSize   Integer
     * @param strategy  Strategy
     */
    public Tradestrategy(Integer barSize, Integer chartDays, Strategy strategy) {

        this.setBarSize(barSize);
        this.chartDays = chartDays;
        this.strategy = strategy;
        super.setDirty(true);
    }

    /**
     * Constructor for Tradestrategy.
     *
     * @param contract Contract
     */
    public Tradestrategy(Contract contract) {

        this.contract = contract;
        super.setDirty(true);
    }

    /**
     * Constructor for Tradestrategy.
     *
     * @param contract   Contract
     * @param tradingday Tradingday
     * @param strategy   Strategy
     * @param portfolio  Portfolio
     * @param riskAmount BigDecimal
     * @param side       String
     * @param tier       String
     * @param trade      Boolean
     * @param chartDays  Integer
     * @param barSize    Integer
     */
    public Tradestrategy(Contract contract, Tradingday tradingday, Strategy strategy, Portfolio portfolio,
                         BigDecimal riskAmount, String side, String tier, Boolean trade, Integer chartDays, Integer barSize) {

        this.setBarSize(barSize);
        this.chartDays = chartDays;
        this.contract = contract;
        this.strategy = strategy;
        this.tradingday = tradingday;
        this.portfolio = portfolio;
        this.riskAmount = riskAmount;
        this.side = side;
        this.tier = tier;
        this.trade = trade;
        super.setDirty(true);
    }

    /**
     * Method getBarSize.
     *
     * @return Integer
     */

    public Integer getBarSize() {
        return this.barSize;
    }

    /**
     * Method setBarSize.
     *
     * @param barSize Integer
     */
    public void setBarSize(Integer barSize) {

        this.barSize = barSize;

        if (barSize == 1) {

            Duration duration = Duration.between(this.getTradingday().getOpen(), this.getTradingday().getClose());
            long daySeconds = duration.getSeconds();
            this.barSize = ((int) daySeconds) * barSize;
        }
    }

    /**
     * Method getChartDays.
     *
     * @return Integer
     */
    public Integer getChartDays() {
        return this.chartDays;
    }

    /**
     * Method setChartDays.
     *
     * @param chartDays Integer
     */
    public void setChartDays(Integer chartDays) {
        this.chartDays = chartDays;
    }

    /**
     * Method getStatus.
     *
     * @return String
     */
    public String getStatus() {
        return this.status;
    }

    /**
     * Method setStatus.
     *
     * @param status String
     */
    public void setStatus(String status) {

        this.status = status;
        tradestrategyStatus.setValue(this.status);
    }

    /**
     * Method getTradestrategyStatus.
     *
     * @return TradestrategyStatus
     */
    public TradestrategyStatus getTradestrategyStatus() {
        return tradestrategyStatus;
    }

    /**
     * Method getRiskAmount.
     *
     * @return BigDecimal
     */
    public BigDecimal getRiskAmount() {
        return this.riskAmount;
    }

    /**
     * Method setRiskAmount.
     *
     * @param riskAmount BigDecimal
     */
    public void setRiskAmount(BigDecimal riskAmount) {
        this.riskAmount = riskAmount;
    }

    /**
     * Method getSide.
     *
     * @return String
     */
    public String getSide() {
        return this.side;
    }

    /**
     * Method setSide.
     *
     * @param side String
     */
    public void setSide(String side) {
        this.side = side;
    }

    /**
     * Method getTier.
     *
     * @return String
     */
    public String getTier() {
        return this.tier;
    }

    /**
     * Method setTier.
     *
     * @param tier String
     */
    public void setTier(String tier) {
        this.tier = tier;
    }

    /**
     * Method getContract.
     *
     * @return Contract
     */
    public Contract getContract() {
        return this.contract;
    }

    /**
     * Method setContract.
     *
     * @param contract Contract
     */
    public void setContract(Contract contract) {
        this.contract = contract;
    }

    /**
     * Method getTradingday.
     *
     * @return Tradingday
     */
    public Tradingday getTradingday() {
        return this.tradingday;
    }

    /**
     * Method setTradingday.
     *
     * @param tradingday Tradingday
     */
    public void setTradingday(Tradingday tradingday) {
        this.tradingday = tradingday;
    }

    /**
     * Method getStrategy.
     *
     * @return Strategy
     */
    public Strategy getStrategy() {
        return this.strategy;
    }

    /**
     * Method setStrategy.
     *
     * @param strategy Strategy
     */
    public void setStrategy(Strategy strategy) {
        this.strategy = strategy;
    }

    /**
     * Method getPortfolio.
     *
     * @return Portfolio
     */
    public Portfolio getPortfolio() {
        return this.portfolio;
    }

    /**
     * Method setPortfolio.
     *
     * @param portfolio Portfolio
     */
    public void setPortfolio(Portfolio portfolio) {
        this.portfolio = portfolio;
    }

    /**
     * Method getTrade.
     *
     * @return Boolean
     */
    public Boolean getTrade() {

        return this.trade;
    }

    /**
     * Method setTrade.
     *
     * @param trade Boolean
     */
    public void setTrade(Boolean trade) {
        this.trade = trade;
    }

    /**
     * Method getTradeOrders.
     *
     * @return List<Trade>
     */
    public List<TradeOrder> getTradeOrders() {
        return this.tradeOrders;
    }

    /**
     * Method setTradeOrders.
     *
     * @param tradeOrders List<TradeOrder>
     */
    public void setTradeOrders(List<TradeOrder> tradeOrders) {
        this.tradeOrders = tradeOrders;
    }

    /**
     * Method getCodeValues.
     *
     * @return List<CodeValue>
     */
    public List<CodeValue> getCodeValues() {
        return this.codeValues;
    }

    /**
     * Method setCodeValues.
     *
     * @param codeValues List<CodeValue>
     */
    public void setCodeValues(List<CodeValue> codeValues) {
        this.codeValues = codeValues;
    }

    /**
     * Returns the value associated with for the this name attribute name. For
     * String data types you should define an classEditorName in the
     * CodeAttribute table, this should be a
     * org.trade.dictionary.valuetype.Decode These are presented as a combo box
     * in the UI for editing. all other data types use JFormattedField.
     *
     * @param name the name of the attribute.
     * @return The value of the attribute.
     */

    @Transient
    public Object getValueCode(String name) throws Exception {

        for (CodeValue value : this.getCodeValues()) {

            if (name.equals(value.getCodeAttribute().getName())) {

                Vector<Object> parm = new Vector<>();
                parm.add(value.getCodeValue());
                Object codeValue = ClassFactory.getCreateClass(value.getCodeAttribute().getClassName(), parm, this);
                return codeValue;
            }
        }
        return null;
    }

    /**
     * Method addTradeOrder.
     *
     * @param tradeOrder TradeOrder
     */
    public void addTradeOrder(TradeOrder tradeOrder) {

        int index = 0;

        for (TradeOrder currTradeOrder : this.tradeOrders) {

            if (CoreUtils.nullSafeComparator(currTradeOrder.getId(), tradeOrder.getId()) == 0) {

                index = this.tradeOrders.indexOf(currTradeOrder);
                break;
            }
        }

        if (index > 0) {

            this.tradeOrders.remove(index);
        }
        this.tradeOrders.add(tradeOrder);
    }

    /**
     * Method getStrategyData.
     *
     * @return StrategyData
     */
    public StrategyData getStrategyData() {
        return this.strategyData;
    }

    /**
     * Method setStrategyData.
     *
     * @param strategyData StrategyData
     */
    public void setStrategyData(StrategyData strategyData) {

        if (null != this.strategyData) {
            this.strategyData.clearBaseCandleDataset();
        }
        this.strategyData = strategyData;
    }

    /**
     * Method setDirty.
     *
     * @param dirty boolean
     */
    public void setDirty(boolean dirty) {

        super.setDirty(dirty);

        if (dirty) {

            this.getTradingday().setDirty(true);
        }
    }

    public static final Comparator<Tradestrategy> DATE_ORDER_ASC = (o1, o2) -> {

        setAscending(true);
        int returnVal;

        if (CoreUtils.nullSafeComparator(o1.getTradingday().getOpen(), o2.getTradingday().getOpen()) == 0) {

            if (CoreUtils.nullSafeComparator(o1.getSide(), o2.getSide()) == 0) {

                returnVal = CoreUtils.nullSafeComparator(o1.getTier(), o2.getTier());
            } else {

                returnVal = CoreUtils.nullSafeComparator(o1.getSide(), o2.getSide());
            }

        } else {

            returnVal = CoreUtils.nullSafeComparator(o1.getTradingday().getOpen(), o2.getTradingday().getOpen());
        }

        if (getAscending().equals(Boolean.FALSE)) {

            returnVal = returnVal * -1;
        }
        return returnVal;
    };

    public static final Comparator<Tradestrategy> TRADINGDAY_CONTRACT = (o1, o2) -> {

        setAscending(true);
        int returnVal;

        if (CoreUtils.nullSafeComparator(o1.getTradingday().getOpen(), o2.getTradingday().getOpen()) == 0) {

            if (o1.getContract().equals(o2.getContract())) {

                if (CoreUtils.nullSafeComparator(o1.getBarSize(), o2.getBarSize()) == 0) {

                    returnVal = CoreUtils.nullSafeComparator(o1.getChartDays(), o2.getChartDays());
                } else {

                    returnVal = CoreUtils.nullSafeComparator(o1.getBarSize(), o2.getBarSize());
                }
            } else {

                returnVal = o1.getContract().getSymbol().compareTo(o2.getContract().getSymbol());
            }

        } else {

            returnVal = CoreUtils.nullSafeComparator(o1.getTradingday().getOpen(), o2.getTradingday().getOpen());
        }

        if (getAscending().equals(Boolean.FALSE)) {

            returnVal = returnVal * -1;
        }
        return returnVal;
    };

    /**
     * Method toString.
     *
     * @return String
     */
    public String toString() {

        return this.getContract().getSymbol().toUpperCase();
    }

    /**
     * Method hashCode.
     * <p>
     * For every field tested in the equals-Method, calculate a hash code c by:
     * <p>
     * If the field f is a boolean: calculate * (f ? 0 : 1);
     * <p>
     * If the field f is a byte, char, short or int: calculate (int)f;
     * <p>
     * If the field f is a long: calculate (int)(f ^ (f >>> 32));
     * <p>
     * If the field f is a float: calculate Float.floatToIntBits(f);
     * <p>
     * If the field f is a double: calculate Double.doubleToLongBits(f) and
     * handle the return value like every long value;
     * <p>
     * If the field f is an object: Use the result of the hashCode() method or 0
     * if f == null;
     * <p>
     * If the field f is an array: See every field as separate element and
     * calculate the hash value in a recursive fashion and combine the values as
     * described next.
     *
     * @return int
     */
    public int hashCode() {

        int hash = super.hashCode();
        hash = hash + this.getContract().hashCode();
        hash = hash + this.getStrategy().hashCode();
        hash = hash + this.getPortfolio().hashCode();
        hash = hash + this.getTradingday().hashCode();
        hash = hash + this.getBarSize().hashCode();
        hash = hash + this.getChartDays().hashCode();
        return hash;
    }

    /**
     * Method equals.
     *
     * @param objectToCompare Object
     * @return boolean
     */
    public boolean equals(Object objectToCompare) {

        if (super.equals(objectToCompare)) {
            return true;
        }

        if (objectToCompare instanceof Tradestrategy tradestrategy) {

            if (this.getContract().equals(tradestrategy.getContract())) {

                if (this.getTradingday().getOpen().compareTo(tradestrategy.getTradingday().getOpen()) == 0) {

                    if (this.getStrategy().getName().equals(tradestrategy.getStrategy().getName())) {

                        if (this.getPortfolio().getName().equals(tradestrategy.getPortfolio().getName())) {

                            return this.getBarSize().equals(tradestrategy.getBarSize());
                        }
                    }
                }
            }
        }
        return false;
    }

    /**
     * Method isThereOpenTradePosition.
     *
     * @return boolean Is there open trade.
     */
    @Transient
    public boolean isThereOpenTradePosition() {

        for (TradeOrder tradeOrder : this.getTradeOrders()) {

            if (tradeOrder.getIsFilled() && tradeOrder.getTradePosition()
                    .equals(tradeOrder.getTradePosition().getContract().getTradePosition())) {

                return true;
            }
        }
        return false;
    }

    /**
     * Method clone.
     *
     * @return Object
     */
    public Object clone() throws CloneNotSupportedException {

        Tradestrategy tradestrategy = (Tradestrategy) super.clone();
        Contract contract = (Contract) this.getContract().clone();
        tradestrategy.setContract(contract);
        Tradingday tradingday = (Tradingday) this.getTradingday().clone();
        tradestrategy.setTradingday(tradingday);
        Portfolio portfolio = (Portfolio) this.getPortfolio().clone();
        tradestrategy.setPortfolio(portfolio);
        Strategy strategy = (Strategy) this.getStrategy().clone();
        tradestrategy.setStrategy(strategy);
        List<TradeOrder> tradeOrders = new ArrayList<>(0);
        tradestrategy.setTradeOrders(tradeOrders);
        return tradestrategy;
    }
}
